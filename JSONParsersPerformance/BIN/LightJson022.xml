<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LightJson022</name>
    </assembly>
    <members>
        <member name="T:LightJson022.JsonArray">
            <summary>
            Represents an ordered collection of JsonValues.
            </summary>
        </member>
        <member name="P:LightJson022.JsonArray.Count">
            <summary>
            Gets the number of values in this collection.
            </summary>
        </member>
        <member name="P:LightJson022.JsonArray.Item(System.Int32)">
            <summary>
            Gets or sets the value at the given index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <remarks>
            The getter will return JsonValue.Null if the given index is out of range.
            </remarks>
        </member>
        <member name="M:LightJson022.JsonArray.#ctor">
            <summary>
            Initializes a new instance of JsonArray.
            </summary>
        </member>
        <member name="M:LightJson022.JsonArray.#ctor(LightJson022.JsonValue[])">
            <summary>
            Initializes a new instance of JsonArray, adding the given values to the collection.
            </summary>
            <param name="values">The values to be added to this collection.</param>
        </member>
        <member name="M:LightJson022.JsonArray.Add(LightJson022.JsonValue)">
            <summary>
            Adds the given value to this collection.
            </summary>
            <param name="value">The value to be added.</param>
            <returns>Returns this collection.</returns>
        </member>
        <member name="M:LightJson022.JsonArray.Insert(System.Int32,LightJson022.JsonValue)">
            <summary>
            Inserts the given value at the given index in this collection.
            </summary>
            <param name="index">The index where the given value will be inserted.</param>
            <param name="value">The value to be inserted into this collection.</param>
            <returns>Returns this collection.</returns>
        </member>
        <member name="M:LightJson022.JsonArray.Remove(System.Int32)">
            <summary>
            Removes the value at the given index.
            </summary>
            <param name="index">The index of the value to be removed.</param>
            <returns>Return this collection.</returns>
        </member>
        <member name="M:LightJson022.JsonArray.Clear">
            <summary>
            Clears the contents of this collection.
            </summary>
            <returns>Returns this collection.</returns>
        </member>
        <member name="M:LightJson022.JsonArray.Contains(LightJson022.JsonValue)">
            <summary>
            Determines whether the given item is in the JsonArray.
            </summary>
            <param name="item">The item to locate in the JsonArray.</param>
            <returns>Returns true if the item is found; otherwise, false.</returns>
        </member>
        <member name="M:LightJson022.JsonArray.IndexOf(LightJson022.JsonValue)">
            <summary>
            Determines the index of the given item in this JsonArray.
            </summary>
            <param name="item">The item to locate in this JsonArray.</param>
            <returns>The index of the item, if found. Otherwise, returns -1.</returns>
        </member>
        <member name="M:LightJson022.JsonArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:LightJson022.JsonArray.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
        </member>
        <member name="M:LightJson022.JsonArray.ToString">
            <summary>
            Returns a JSON string representing the state of the array.
            </summary>
            <remarks>
            The resulting string is safe to be inserted as is into dynamically
            generated JavaScript or JSON code.
            </remarks>
        </member>
        <member name="M:LightJson022.JsonArray.ToString(System.Boolean)">
            <summary>
            Returns a JSON string representing the state of the array.
            </summary>
            <remarks>
            The resulting string is safe to be inserted as is into dynamically
            generated JavaScript or JSON code.
            </remarks>
            <param name="pretty">
            Indicates whether the resulting string should be formatted for human-readability.
            </param>
        </member>
        <member name="T:LightJson022.JsonObject">
            <summary>
            Represents a key-value pair collection of JsonValue objects.
            </summary>
        </member>
        <member name="P:LightJson022.JsonObject.Count">
            <summary>
            Gets the number of properties in this JsonObject.
            </summary>
        </member>
        <member name="P:LightJson022.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the property with the given key.
            </summary>
            <param name="key">The key of the property to get or set.</param>
            <remarks>
            The getter will return JsonValue.Null if the given key is not assosiated with any value.
            </remarks>
        </member>
        <member name="M:LightJson022.JsonObject.#ctor">
            <summary>
            Initializes a new instance of JsonObject.
            </summary>
        </member>
        <member name="M:LightJson022.JsonObject.Add(System.String)">
            <summary>
            Adds a key with a null value to this collection.
            </summary>
            <param name="key">The key of the property to be added.</param>
            <remarks>Returns this JsonObject.</remarks>
        </member>
        <member name="M:LightJson022.JsonObject.Add(System.String,LightJson022.JsonValue)">
            <summary>
            Adds a value associated with a key to this collection.
            </summary>
            <param name="key">The key of the property to be added.</param>
            <param name="value">The value of the property to be added.</param>
            <returns>Returns this JsonObject.</returns>
        </member>
        <member name="M:LightJson022.JsonObject.Remove(System.String)">
            <summary>
            Removes a property with the given key.
            </summary>
            <param name="key">The key of the property to be removed.</param>
            <returns>
            Returns true if the given key is found and removed; otherwise, false.
            </returns>
        </member>
        <member name="M:LightJson022.JsonObject.Clear">
            <summary>
            Clears the contents of this collection.
            </summary>
            <returns>Returns this JsonObject.</returns>
        </member>
        <member name="M:LightJson022.JsonObject.Rename(System.String,System.String)">
            <summary>
            Changes the key of one of the items in the collection.
            </summary>
            <remarks>
            This method has no effects if the <i>oldKey</i> does not exists.
            If the <i>newKey</i> already exists, the value will be overwritten.
            </remarks>
            <param name="oldKey">The name of the key to be changed.</param>
            <param name="newKey">The new name of the key.</param>
            <returns>Returns this JsonObject.</returns>
        </member>
        <member name="M:LightJson022.JsonObject.ContainsKey(System.String)">
            <summary>
            Determines whether this collection contains an item assosiated with the given key.
            </summary>
            <param name="key">The key to locate in this collection.</param>
            <returns>Returns true if the key is found; otherwise, false.</returns>
        </member>
        <member name="M:LightJson022.JsonObject.Contains(LightJson022.JsonValue)">
            <summary>
            Determines whether this collection contains the given JsonValue.
            </summary>
            <param name="value">The value to locate in this collection.</param>
            <returns>Returns true if the value is found; otherwise, false.</returns>
        </member>
        <member name="M:LightJson022.JsonObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
        </member>
        <member name="M:LightJson022.JsonObject.System#Collections#Generic#IEnumerable{LightJson022#JsonValue}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
        </member>
        <member name="M:LightJson022.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
        </member>
        <member name="M:LightJson022.JsonObject.ToString">
            <summary>
            Returns a JSON string representing the state of the object.
            </summary>
            <remarks>
            The resulting string is safe to be inserted as is into dynamically
            generated JavaScript or JSON code.
            </remarks>
        </member>
        <member name="M:LightJson022.JsonObject.ToString(System.Boolean)">
            <summary>
            Returns a JSON string representing the state of the object.
            </summary>
            <remarks>
            The resulting string is safe to be inserted as is into dynamically
            generated JavaScript or JSON code.
            </remarks>
            <param name="pretty">
            Indicates whether the resulting string should be formatted for human-readability.
            </param>
        </member>
        <member name="T:LightJson022.Serialization.JsonParseException">
            <summary>
            The exception that is thrown when a JSON message cannot be parsed.
            </summary>
            <remarks>
            This exception is only intended to be thrown by LightJson.
            </remarks>
        </member>
        <member name="P:LightJson022.Serialization.JsonParseException.Position">
            <summary>
            Gets the text position where the error occurred.
            </summary>
        </member>
        <member name="P:LightJson022.Serialization.JsonParseException.Type">
            <summary>
            Gets the type of error that caused the exception to be thrown.
            </summary>
        </member>
        <member name="M:LightJson022.Serialization.JsonParseException.#ctor">
            <summary>
            Initializes a new instance of JsonParseException.
            </summary>
        </member>
        <member name="M:LightJson022.Serialization.JsonParseException.#ctor(LightJson022.Serialization.JsonParseException.ErrorType,LightJson022.Serialization.TextPosition)">
            <summary>
            Initializes a new instance of JsonParseException with the given error type and position.
            </summary>
            <param name="type">The error type that describes the cause of the error.</param>
            <param name="position">The position in the text where the error occurred.</param>
        </member>
        <member name="M:LightJson022.Serialization.JsonParseException.#ctor(System.String,LightJson022.Serialization.JsonParseException.ErrorType,LightJson022.Serialization.TextPosition)">
            <summary>
            Initializes a new instance of JsonParseException with the given message, error type, and position.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="type">The error type that describes the cause of the error.</param>
            <param name="position">The position in the text where the error occurred.</param>
        </member>
        <member name="T:LightJson022.Serialization.JsonParseException.ErrorType">
            <summary>
            Enumerates the types of errors that can occur when parsing a JSON message.
            </summary>
        </member>
        <member name="F:LightJson022.Serialization.JsonParseException.ErrorType.Unknown">
            <summary>
            Indicates that the cause of the error is unknown.
            </summary>
        </member>
        <member name="F:LightJson022.Serialization.JsonParseException.ErrorType.IncompleteMessage">
            <summary>
            Indicates that the text ended before the message could be parsed.
            </summary>
        </member>
        <member name="F:LightJson022.Serialization.JsonParseException.ErrorType.DuplicateObjectKeys">
            <summary>
            Indicates that a JsonObject contains more than one key with the same name.
            </summary>
        </member>
        <member name="F:LightJson022.Serialization.JsonParseException.ErrorType.InvalidOrUnexpectedCharacter">
            <summary>
            Indicates that the parser encountered and invalid or unexpected character.
            </summary>
        </member>
        <member name="T:LightJson022.Serialization.JsonReader">
            <summary>
            Represents a reader that can read JsonValues.
            </summary>
        </member>
        <member name="M:LightJson022.Serialization.JsonReader.Parse(System.IO.TextReader)">
            <summary>
            Creates a JsonValue by using the given TextReader.
            </summary>
            <param name="reader">The TextReader used to read a JSON message.</param>
        </member>
        <member name="M:LightJson022.Serialization.JsonReader.Parse(System.String)">
            <summary>
            Creates a JsonValue by reader the JSON message in the given string.
            </summary>
            <param name="source">The string containing the JSON message.</param>
        </member>
        <member name="M:LightJson022.Serialization.JsonReader.ParseFile(System.String)">
            <summary>
            Creates a JsonValue by reading the given file.
            </summary>
            <param name="path">The file path to be read.</param>
        </member>
        <member name="T:LightJson022.Serialization.JsonSerializationException">
            <summary>
            The exception that is thrown when a JSON value cannot be serialized.
            </summary>
            <remarks>
            This exception is only intended to be thrown by LightJson.
            </remarks>
        </member>
        <member name="P:LightJson022.Serialization.JsonSerializationException.Type">
            <summary>
            Gets the type of error that caused the exception to be thrown.
            </summary>
        </member>
        <member name="M:LightJson022.Serialization.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of JsonSerializationException.
            </summary>
        </member>
        <member name="M:LightJson022.Serialization.JsonSerializationException.#ctor(LightJson022.Serialization.JsonSerializationException.ErrorType)">
            <summary>
            Initializes a new instance of JsonSerializationException with the given error type.
            </summary>
            <param name="type">The error type that describes the cause of the error.</param>
        </member>
        <member name="M:LightJson022.Serialization.JsonSerializationException.#ctor(System.String,LightJson022.Serialization.JsonSerializationException.ErrorType)">
            <summary>
            Initializes a new instance of JsonSerializationException with the given message and error type.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="type">The error type that describes the cause of the error.</param>
        </member>
        <member name="T:LightJson022.Serialization.JsonSerializationException.ErrorType">
            <summary>
            Enumerates the types of errors that can occur during serialization.
            </summary>
        </member>
        <member name="F:LightJson022.Serialization.JsonSerializationException.ErrorType.Unknown">
            <summary>
            Indicates that the cause of the error is unknown.
            </summary>
        </member>
        <member name="F:LightJson022.Serialization.JsonSerializationException.ErrorType.InvalidNumber">
            <summary>
            Indicates that the writer encountered an invalid number value (NAN, infinity) during serialization.
            </summary>
        </member>
        <member name="F:LightJson022.Serialization.JsonSerializationException.ErrorType.InvalidValueType">
            <summary>
            Indicates that the object been serialized contains an invalid JSON value type.
            That is, a value type that is not null, boolean, number, string, object, or array.
            </summary>
        </member>
        <member name="F:LightJson022.Serialization.JsonSerializationException.ErrorType.CircularReference">
            <summary>
            Indicates that the object been serialized contains a circular reference.
            </summary>
        </member>
        <member name="T:LightJson022.Serialization.JsonWriter">
            <summary>
            Represents a writer that can write string representations of JsonValues.
            </summary>
        </member>
        <member name="F:LightJson022.Serialization.JsonWriter.renderingCollections">
            <summary>
            A set of containing all the collection objects (JsonObject/JsonArray) being rendered.
            It is used to prevent circular references; since collections that contain themselves
            will never finish rendering.
            </summary>
        </member>
        <member name="P:LightJson022.Serialization.JsonWriter.IndentString">
            <summary>
            Gets or sets the string representing a indent in the output.
            </summary>
        </member>
        <member name="P:LightJson022.Serialization.JsonWriter.SpacingString">
            <summary>
            Gets or sets the string representing a space in the output.
            </summary>
        </member>
        <member name="P:LightJson022.Serialization.JsonWriter.NewLineString">
            <summary>
            Gets or sets the string representing a new line on the output.
            </summary>
        </member>
        <member name="M:LightJson022.Serialization.JsonWriter.#ctor">
            <summary>
            Initializes a new instance of JsonWriter.
            </summary>
        </member>
        <member name="M:LightJson022.Serialization.JsonWriter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of JsonWriter.
            </summary>
            <param name="pretty">
            A value indicating whether the output of the writer should be human-readable.
            </param>
        </member>
        <member name="M:LightJson022.Serialization.JsonWriter.Serialize(LightJson022.JsonValue)">
            <summary>
            Returns a string representation of the given JsonValue.
            </summary>
            <param name="jsonValue">The JsonValue to serialize.</param>
        </member>
        <member name="M:LightJson022.Serialization.JsonWriter.Dispose">
            <summary>
            Releases all the resources used by this object.
            </summary>
        </member>
        <member name="T:LightJson022.Serialization.TextPosition">
            <summary>
            Represents a position within a plain text resource.
            </summary>
        </member>
        <member name="F:LightJson022.Serialization.TextPosition.column">
            <summary>
            The column position, 0-based.
            </summary>
        </member>
        <member name="F:LightJson022.Serialization.TextPosition.line">
            <summary>
            The line position, 0-based.
            </summary>
        </member>
        <member name="T:LightJson022.Serialization.TextScanner">
            <summary>
            Represents a text scanner that reads one character at a time.
            </summary>
        </member>
        <member name="P:LightJson022.Serialization.TextScanner.Position">
            <summary>
            Gets the position of the scanner within the text.
            </summary>
        </member>
        <member name="M:LightJson022.Serialization.TextScanner.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of TextScanner.
            </summary>
            <param name="reader">The TextReader to read the text.</param>
        </member>
        <member name="M:LightJson022.Serialization.TextScanner.Peek">
            <summary>
            Reads the next character in the stream without changing the current position.
            </summary>
        </member>
        <member name="M:LightJson022.Serialization.TextScanner.Read">
            <summary>
            Reads the next character in the stream, advancing the text position.
            </summary>
        </member>
        <member name="M:LightJson022.Serialization.TextScanner.SkipWhitespace">
            <summary>
            Advances the scanner to next non-whitespace character.
            </summary>
        </member>
        <member name="M:LightJson022.Serialization.TextScanner.Assert(System.Char)">
            <summary>
            Verifies that the given character matches the next character in the stream.
            If the characters do not match, an exception will be thrown.
            </summary>
            <param name="next">The expected character.</param>
        </member>
        <member name="M:LightJson022.Serialization.TextScanner.Assert(System.String)">
            <summary>
            Verifies that the given string matches the next characters in the stream.
            If the strings do not match, an exception will be thrown.
            </summary>
            <param name="next">The expected string.</param>
        </member>
        <member name="T:LightJson022.JsonValue">
            <summary>
            A wrapper object that contains a valid JSON value.
            </summary>
        </member>
        <member name="F:LightJson022.JsonValue.Null">
            <summary>
            Represents a null JsonValue.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.Type">
            <summary>
            Gets the type of this JsonValue.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.IsNull">
            <summary>
            Gets a value indicating whether this JsonValue is Null.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.IsBoolean">
            <summary>
            Gets a value indicating whether this JsonValue is a Boolean.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.IsInteger">
            <summary>
            Gets a value indicating whether this JsonValue is an Integer.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.IsNumber">
            <summary>
            Gets a value indicating whether this JsonValue is a Number.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.IsString">
            <summary>
            Gets a value indicating whether this JsonValue is a String.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.IsJsonObject">
            <summary>
            Gets a value indicating whether this JsonValue is a JsonObject.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.IsJsonArray">
            <summary>
            Gets a value indicating whether this JsonValue is a JsonArray.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.IsDateTime">
            <summary>
            Gets a value indicating whether this JsonValue represents a DateTime.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.AsBoolean">
            <summary>
            Gets this value as a Boolean type.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.AsInteger">
            <summary>
            Gets this value as an Integer type.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.AsNumber">
            <summary>
            Gets this value as a Number type.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.AsString">
            <summary>
            Gets this value as a String type.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.AsJsonObject">
            <summary>
            Gets this value as an JsonObject.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.AsJsonArray">
            <summary>
            Gets this value as an JsonArray.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.AsDateTime">
            <summary>
            Gets this value as a system.DateTime.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.AsObject">
            <summary>
            Gets this (inner) value as a System.object.
            </summary>
        </member>
        <member name="P:LightJson022.JsonValue.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when this JsonValue is not a JsonObject.
            </exception>
        </member>
        <member name="P:LightJson022.JsonValue.Item(System.Int32)">
            <summary>
            Gets or sets the value at the specified index.
            </summary>
            <param name="index">The zero-based index of the value to get or set.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown when this JsonValue is not a JsonArray
            </exception>
        </member>
        <member name="M:LightJson022.JsonValue.#ctor(LightJson022.JsonValueType,System.Double,System.Object)">
            <summary>
            Initializes a new instance of the JsonValue struct.
            </summary>
            <param name="type">The Json type of the JsonValue.</param>
            <param name="value">
            The internal value of the JsonValue.
            This is used when the Json type is Number or Boolean.
            </param>
            <param name="reference">
            The internal value reference of the JsonValue.
            This value is used when the Json type is String, JsonObject, or JsonArray.
            </param>
        </member>
        <member name="M:LightJson022.JsonValue.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the JsonValue struct, representing a Boolean value.
            </summary>
            <param name="value">The value to be wrapped.</param>
        </member>
        <member name="M:LightJson022.JsonValue.#ctor(System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the JsonValue struct, representing a Number value.
            </summary>
            <param name="value">The value to be wrapped.</param>
        </member>
        <member name="M:LightJson022.JsonValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the JsonValue struct, representing a String value.
            </summary>
            <param name="value">The value to be wrapped.</param>
        </member>
        <member name="M:LightJson022.JsonValue.#ctor(LightJson022.JsonObject)">
            <summary>
            Initializes a new instance of the JsonValue struct, representing a JsonObject.
            </summary>
            <param name="value">The value to be wrapped.</param>
        </member>
        <member name="M:LightJson022.JsonValue.#ctor(LightJson022.JsonArray)">
            <summary>
            Initializes a new instance of the JsonValue struct, representing a Array reference value.
            </summary>
            <param name="value">The value to be wrapped.</param>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(System.Nullable{System.Boolean})~LightJson022.JsonValue">
            <summary>
            Converts the given nullable boolean into a JsonValue.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(System.Nullable{System.Double})~LightJson022.JsonValue">
            <summary>
            Converts the given nullable double into a JsonValue.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(System.String)~LightJson022.JsonValue">
            <summary>
            Converts the given string into a JsonValue.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(LightJson022.JsonObject)~LightJson022.JsonValue">
            <summary>
            Converts the given JsonObject into a JsonValue.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(LightJson022.JsonArray)~LightJson022.JsonValue">
            <summary>
            Converts the given JsonArray into a JsonValue.
            </summary>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(System.Nullable{System.DateTime})~LightJson022.JsonValue">
            <summary>
            Converts the given DateTime? into a JsonValue.
            </summary>
            <remarks>
            The DateTime value will be stored as a string using ISO 8601 format,
            since JSON does not define a DateTime type.
            </remarks>
            <param name="value">The value to be converted.</param>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(LightJson022.JsonValue)~System.Int32">
            <summary>
            Converts the given JsonValue into an Int.
            </summary>
            <param name="jsonValue">The JsonValue to be converted.</param>
            <exception cref="T:System.InvalidCastException">
            Throws System.InvalidCastException when the inner type of the
            JsonValue is not the desired type of the conversion.
            </exception>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(LightJson022.JsonValue)~System.Nullable{System.Int32}">
            <summary>
            Converts the given JsonValue into a nullable Int.
            </summary>
            <param name="jsonValue">The JsonValue to be converted.</param>
            <exception cref="T:System.InvalidCastException">
            Throws System.InvalidCastException when the inner value type of the
            JsonValue is not the desired type of the conversion.
            </exception>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(LightJson022.JsonValue)~System.Boolean">
            <summary>
            Converts the given JsonValue into a Bool.
            </summary>
            <param name="jsonValue">The JsonValue to be converted.</param>
            <exception cref="T:System.InvalidCastException">
            Throws System.InvalidCastException when the inner value type of the
            JsonValue is not the desired type of the conversion.
            </exception>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(LightJson022.JsonValue)~System.Nullable{System.Boolean}">
            <summary>
            Converts the given JsonValue into a nullable Bool.
            </summary>
            <param name="jsonValue">The JsonValue to be converted.</param>
            <exception cref="T:System.InvalidCastException">
            Throws System.InvalidCastException when the inner value type of the
            JsonValue is not the desired type of the conversion.
            </exception>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(LightJson022.JsonValue)~System.Double">
            <summary>
            Converts the given JsonValue into a Double.
            </summary>
            <param name="jsonValue">The JsonValue to be converted.</param>
            <exception cref="T:System.InvalidCastException">
            Throws System.InvalidCastException when the inner value type of the
            JsonValue is not the desired type of the conversion.
            </exception>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(LightJson022.JsonValue)~System.Nullable{System.Double}">
            <summary>
            Converts the given JsonValue into a nullable Double.
            </summary>
            <param name="jsonValue">The JsonValue to be converted.</param>
            <exception cref="T:System.InvalidCastException">
            Throws System.InvalidCastException when the inner value type of the
            JsonValue is not the desired type of the conversion.
            </exception>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(LightJson022.JsonValue)~System.String">
            <summary>
            Converts the given JsonValue into a String.
            </summary>
            <param name="jsonValue">The JsonValue to be converted.</param>
            <exception cref="T:System.InvalidCastException">
            Throws System.InvalidCastException when the inner value type of the
            JsonValue is not the desired type of the conversion.
            </exception>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(LightJson022.JsonValue)~LightJson022.JsonObject">
            <summary>
            Converts the given JsonValue into a JsonObject.
            </summary>
            <param name="jsonValue">The JsonValue to be converted.</param>
            <exception cref="T:System.InvalidCastException">
            Throws System.InvalidCastException when the inner value type of the
            JsonValue is not the desired type of the conversion.
            </exception>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(LightJson022.JsonValue)~LightJson022.JsonArray">
            <summary>
            Converts the given JsonValue into a JsonArray.
            </summary>
            <param name="jsonValue">The JsonValue to be converted.</param>
            <exception cref="T:System.InvalidCastException">
            Throws System.InvalidCastException when the inner value type of the
            JsonValue is not the desired type of the conversion.
            </exception>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(LightJson022.JsonValue)~System.DateTime">
            <summary>
            Converts the given JsonValue into a DateTime.
            </summary>
            <param name="jsonValue">The JsonValue to be converted.</param>
            <exception cref="T:System.InvalidCastException">
            Throws System.InvalidCastException when the inner value type of the
            JsonValue is not the desired type of the conversion.
            </exception>
        </member>
        <member name="M:LightJson022.JsonValue.op_Implicit(LightJson022.JsonValue)~System.Nullable{System.DateTime}">
            <summary>
            Converts the given JsonValue into a nullable DateTime.
            </summary>
            <param name="jsonValue">The JsonValue to be converted.</param>
            <exception cref="T:System.InvalidCastException">
            Throws System.InvalidCastException when the inner value type of the
            JsonValue is not the desired type of the conversion.
            </exception>
        </member>
        <member name="M:LightJson022.JsonValue.op_Equality(LightJson022.JsonValue,LightJson022.JsonValue)">
            <summary>
            Returns a value indicating whether the two given JsonValues are equal.
            </summary>
            <param name="a">A JsonValue to compare.</param>
            <param name="b">A JsonValue to compare.</param>
        </member>
        <member name="M:LightJson022.JsonValue.op_Inequality(LightJson022.JsonValue,LightJson022.JsonValue)">
            <summary>
            Returns a value indicating whether the two given JsonValues are unequal.
            </summary>
            <param name="a">A JsonValue to compare.</param>
            <param name="b">A JsonValue to compare.</param>
        </member>
        <member name="M:LightJson022.JsonValue.Parse(System.String)">
            <summary>
            Returns a JsonValue by parsing the given string.
            </summary>
            <param name="text">The JSON-formatted string to be parsed.</param>
        </member>
        <member name="M:LightJson022.JsonValue.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this JsonValue is equal to the given object.
            </summary>
            <param name="obj">The object to test.</param>
        </member>
        <member name="M:LightJson022.JsonValue.GetHashCode">
            <summary>
            Returns a hash code for this JsonValue.
            </summary>
        </member>
        <member name="M:LightJson022.JsonValue.ToString">
            <summary>
            Returns a JSON string representing the state of the object.
            </summary>
            <remarks>
            The resulting string is safe to be inserted as is into dynamically
            generated JavaScript or JSON code.
            </remarks>
        </member>
        <member name="M:LightJson022.JsonValue.ToString(System.Boolean)">
            <summary>
            Returns a JSON string representing the state of the object.
            </summary>
            <remarks>
            The resulting string is safe to be inserted as is into dynamically
            generated JavaScript or JSON code.
            </remarks>
            <param name="pretty">
            Indicates whether the resulting string should be formatted for human-readability.
            </param>
        </member>
        <member name="T:LightJson022.JsonValueType">
            <summary>
            Enumerates the types of Json values.
            </summary>
        </member>
        <member name="F:LightJson022.JsonValueType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:LightJson022.JsonValueType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:LightJson022.JsonValueType.Number">
            <summary>
            A number value.
            </summary>
        </member>
        <member name="F:LightJson022.JsonValueType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:LightJson022.JsonValueType.Object">
            <summary>
            An object value.
            </summary>
        </member>
        <member name="F:LightJson022.JsonValueType.Array">
            <summary>
            An array value.
            </summary>
        </member>
    </members>
</doc>
